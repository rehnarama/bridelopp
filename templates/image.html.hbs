<!DOCTYPE html>
<html lang="en">

{{>partials/head}}

<style>
    main {
        display: flex;
        flex-direction: column;
        padding: var(--unit);
        align-items: center;
    }

    html {
        scroll-snap-type: y mandatory;
    }

    header {
        justify-self: flex-start;
        scroll-snap-align: start;
    }

    #content {
        justify-self: center;
        display: flex;
        align-items: stretch;
        gap: calc(4 * var(--unit));
        width: 100%;
        padding: calc(2 * var(--unit)) var(--unit);
        overflow-x: scroll;
        height: 100vh;
        flex-shrink: 0;

        scroll-snap-type: x mandatory;
        scroll-snap-align: end;
    }

    .image-container {
        text-align: center;
        display: flex;
        flex-direction: column;
        width: 90vw;
        position: relative;
        flex-shrink: 0;
    }

    @media (orientation: landscape) {
        .image-container.portrait {
            width: 50vw;
        }
    }

    .image-label {
        position: absolute;
        display: block;
        left: 0;
        bottom: 0;
        right: 0;
        background-color: rgba(0, 0, 0, 0.6);
        color: white;
        margin: 0;
        border-radius: 0 0 calc(2 * var(--unit)) calc(2 * var(--unit));
    }

    .image {
        border-radius: calc(2 * var(--unit));
        box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.5);
        height: 100%;
        width: 100%;
        object-fit: cover;

        scroll-snap-align: center;
    }

    .image:fullscreen {
        object-fit: contain;
    }

    .image-link {
        height: 100%;
        width: 100%;
    }

    #upload-container {
        grid-row: 1 / 2;
        border: 4px dashed;
        align-self: stretch;
        border-radius: calc(2 * var(--unit));
        border-color: var(--primary-color);
        width: 400px;
        max-width: 80vw;
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: var(--unit);
        gap: calc(3 * var(--unit));

        scroll-snap-align: start;
        display: none;
    }

    #file-picker {
        display: none;
    }

    #progress {
        background-color: rgba(0, 0, 0, 0.8);
        color: var(--background-color);
        display: none;
        gap: var(--unit);
        align-items: center;
        justify-content: center;
        text-align: center;
        position: fixed;
        left: 0;
        right: 0;
        top: 0;
        bottom: 0;
        fill: white;
    }

    #no-images {
        background-color: rgba(0, 0, 0, 0.8);
        color: var(--background-color);
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: calc(4 * var(--unit));
        border-radius: calc(2 * var(--unit));
        width: 600px;
        flex-shrink: 0;
        max-width: 90vw;
        scroll-snap-align: end;
    }

    .remove-button {
        position: absolute;
        right: 0;
        top: 0;
        background-color: rgba(0, 0, 0, 0.8);
        padding: var(--unit);
        border-radius: 0 calc(2 * var(--unit)) 0 calc(2 * var(--unit));
        cursor: pointer;
        user-select: none;
    }
</style>


<body>
    <main>
        <header>
            {{>partials/app_logo}}
        </header>

        <input type="file" accept="image/*" id="file-picker" multiple />
        <article id="content">
            <div id="upload-container">
                <p>Här kan du ladda upp bilder du tagit, som du kanske vill dela med oss!</p>
                <p>Tryck här för att ladda upp en bild.</p>
            </div>
            {{#each images}}
            <div class="image-container {{#if this.portrait}}portrait{{/if}}">
                <a href="{{this.url}}" class="image-link" target="_blank">
                    <img width="{{this.width}}" height="{{this.height}}" src="{{this.url}}" class="image"
                        alt="{{this.created}}" />
                </a>
                <p class="image-label">{{this.created}}</p>
                <div class="remove-button" {{#unless this.owned}}style="display: none" {{/unless}}
                    data-url="{{this.url}}">❌</div>
            </div>
            {{else}}
            <div class="image-container" id="no-images">
                Ingen har laddat upp någon bild ännu!
            </div>
            {{/each}}
        </article>

        <div id="progress">
            <p id="progress-text">
                Laddar upp 0/0 bilder...
            </p>
            <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z" opacity=".25" />
                <path
                    d="M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z">
                    <animateTransform attributeName="transform" type="rotate" dur="0.75s" values="0 12 12;360 12 12"
                        repeatCount="indefinite" />
                </path>
            </svg>
        </div>
    </main>
</body>

<script>
    const filePicker = document.getElementById("file-picker");
    const uploadContainer = document.getElementById("upload-container");
    const progressText = document.getElementById("progress-text");
    const progress = document.getElementById("progress");

    filePicker.addEventListener("change", (e) => {
        const files = e.currentTarget.files;

        let count = 0;

        progressText.innerHTML = `Laddar upp ${count}/${files.length} bilder...`;
        progress.style.display = "flex";
        for (const file of files) {
            const reader = new FileReader();
            reader.onload = async (load) => {
                const arrayBuffer = load.target.result;
                const response = await fetch("/photo", {
                    method: "PUT",
                    body: arrayBuffer,
                    headers: { "Content-Type": file.type }
                });
                count++;
                progressText.innerHTML = `Laddar upp ${count}/${files.length} bilder.`;

                if (count === files.length) {
                    location.reload();
                }
            }

            reader.readAsArrayBuffer(file);
        }
    });

    uploadContainer.addEventListener("click", (e) => {
        filePicker.click();
    });

    async function onImageClick(e) {
        e.preventDefault();
        e.stopPropagation();

        if (document.fullscreenElement === null) {
            const currentTarget = e.currentTarget;
            try {
                await currentTarget.requestFullscreen();
            } catch (e) {
                window.open(currentTarget.src, "_blank");
            }
        } else {
            document.exitFullscreen();
        }
        return false;
    }

    async function removeImage(url) {
        progressText.innerHTML = "Tar bort bild...";
        progress.style.display = "flex";
        await fetch(`/photo/${encodeURIComponent(url)}`, {
            method: "DELETE",
        });
    }

    document.querySelectorAll(".image").forEach(img => {
        img.addEventListener("click", onImageClick);
    });


    document.querySelectorAll(".remove-button").forEach(btn => {
        btn.addEventListener("click", async () => {

            if (confirm("Är du säker på att du vill ta bort bilden?")) {
                const url = btn.attributes["data-url"].value;
                await removeImage(url);
                location.reload();
            }
        });
    });



</script>

</html>